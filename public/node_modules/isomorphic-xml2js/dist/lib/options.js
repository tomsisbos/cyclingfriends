var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var defaultOptions = {
    explicitRoot: true,
    explicitArray: true,
    emptyTag: '',
    strict: true,
    tagNameProcessors: [],
    valueProcessors: [],
    attrNameProcessors: [],
    attrValueProcessors: [],
    xmldec: { version: "1.0", encoding: "UTF-8", standalone: true }
};
export var defaultCharkey = "_";
export var defaultAttrkey = "$";
export var defaultChildkey = "$$";
export function overrideDefaultsWith(userOptions) {
    // Ideally we would just use some generic deep merge thing here but don't want to pull in dependencies
    return __assign({}, defaultOptions, userOptions, { xmldec: __assign({}, defaultOptions.xmldec, (userOptions && userOptions.xmldec)) });
}
//# sourceMappingURL=options.js.map