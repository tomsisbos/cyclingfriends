var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { overrideDefaultsWith, defaultAttrkey, defaultCharkey, defaultChildkey } from "./options";
var errorNS;
try {
    errorNS = new DOMParser().parseFromString('INVALID', 'text/xml').getElementsByTagName("parsererror")[0].namespaceURI;
}
catch (ignored) {
    // Most browsers will return a document containing <parsererror>, but IE will throw.
}
function throwIfError(dom) {
    if (errorNS) {
        var parserErrors = dom.getElementsByTagNameNS(errorNS, "parsererror");
        if (parserErrors.length) {
            throw new Error(parserErrors.item(0).innerHTML);
        }
    }
}
export function parseString(xml, options, callback) {
    if (typeof options === "function") {
        callback = options;
        options = undefined;
    }
    new Parser(options).parseString(xml, callback);
}
function isElement(node) {
    return !!node.attributes;
}
var Parser = /** @class */ (function () {
    function Parser(opts) {
        this.opts = overrideDefaultsWith(opts);
    }
    Parser.prototype.tagName = function (nodeName) {
        return this.opts.tagNameProcessors.reduce(function (str, fn) { return fn(str); }, this.opts.normalizeTags ? nodeName.toLowerCase() : nodeName);
    };
    Parser.prototype.parseString = function (xml, callback) {
        var parser = new DOMParser();
        var obj;
        try {
            var dom = parser.parseFromString(xml, "application/xml");
            throwIfError(dom);
            if (this.opts.explicitRoot) {
                var childName = this.tagName(dom.documentElement.nodeName);
                obj = (_a = {}, _a[childName] = this.domToObject(dom.childNodes[0]), _a);
            }
            else {
                obj = this.domToObject(dom.childNodes[0]);
            }
        }
        catch (err) {
            callback(err);
            return;
        }
        callback(null, obj);
        var _a;
    };
    ;
    Parser.prototype.parseAttributes = function (node) {
        if (this.opts.ignoreAttrs || !isElement(node) || !node.hasAttributes()) {
            return undefined;
        }
        var namespaceKey = (this.opts.attrkey || defaultAttrkey) + "ns";
        var attrsObject = {};
        if (isElement(node) && node.hasAttributes()) {
            for (var i = 0; i < node.attributes.length; i++) {
                var attr = node.attributes[i];
                var attrName = this.opts.attrNameProcessors.reduce(function (str, fn) { return fn(str); }, attr.nodeName);
                var attrValue = this.opts.attrValueProcessors.reduce(function (str, fn) { return fn(str); }, attr.nodeValue);
                if (this.opts.xmlns) {
                    attrsObject[attrName] = { value: attrValue, local: attr.localName, uri: attr.namespaceURI };
                }
                else {
                    attrsObject[attrName] = attrValue;
                }
            }
        }
        return attrsObject;
    };
    Parser.prototype.domToObject = function (node) {
        if (node.childNodes.length === 0 && !(isElement(node) && node.hasAttributes())) {
            return this.opts.emptyTag;
        }
        var attrsObject = this.parseAttributes(node);
        var childkey = this.opts.childkey || defaultChildkey;
        var charkey = this.opts.charkey || defaultCharkey;
        var result = {};
        var allTextContent = '';
        for (var i = 0; i < node.childNodes.length; i++) {
            var child = node.childNodes[i];
            if (child.nodeType === Node.TEXT_NODE || child.nodeType === Node.CDATA_SECTION_NODE) {
                var nodeValue = child.nodeValue || '';
                var textContent = this.opts.normalize
                    ? nodeValue.replace(/\n[ ]+\b/g, ' ').trim()
                    : this.opts.trim
                        ? nodeValue.trim()
                        : nodeValue;
                allTextContent += textContent;
                var addTextChild = this.opts.explicitChildren &&
                    this.opts.preserveChildrenOrder &&
                    this.opts.charsAsChildren &&
                    (this.opts.includeWhiteChars || textContent.trim());
                if (addTextChild) {
                    if (!result[childkey]) {
                        result[childkey] = [];
                    }
                    result[childkey].push((_a = { "#name": "__text__" }, _a[charkey] = textContent, _a));
                }
            }
            else {
                var childObject = this.domToObject(child);
                var childName = this.tagName(child.nodeName);
                if (!result[childName]) {
                    result[childName] = this.opts.explicitArray ? [this.domToObject(child)] : this.domToObject(child);
                }
                else if (Array.isArray(result[childName])) {
                    result[childName].push(childObject);
                }
                else {
                    result[childName] = [result[childName], this.domToObject(child)];
                }
                if (this.opts.explicitChildren && this.opts.preserveChildrenOrder) {
                    if (!result[childkey]) {
                        result[childkey] = [];
                    }
                    if (typeof childObject === "object") {
                        result[childkey].push(__assign({ "#name": childName }, childObject));
                    }
                    else {
                        result[childkey].push((_b = { "#name": childName }, _b[charkey] = childObject, _b));
                    }
                }
            }
        }
        if (Object.keys(result).length === 0 && !attrsObject && !this.opts.explicitCharkey && !this.opts.charkey && !this.opts.xmlns) {
            // Consider passing down the processed tag name instead of recomputing it
            var childName_1 = this.tagName(node.nodeName);
            return this.opts.valueProcessors.reduce(function (str, fn) { return fn(str, childName_1); }, allTextContent);
        }
        // TODO: can this logic be simplified?
        var useExplicitChildrenObj = (this.opts.explicitChildren || this.opts.childkey) &&
            !this.opts.preserveChildrenOrder &&
            (Object.keys(result).length > 0 || (allTextContent && this.opts.charsAsChildren));
        if (useExplicitChildrenObj) {
            result = (_c = {}, _c[childkey] = result, _c);
        }
        if ((allTextContent && this.opts.includeWhiteChars) || allTextContent.trim()) {
            if (useExplicitChildrenObj && this.opts.charsAsChildren) {
                result[childkey][charkey] = allTextContent;
            }
            else {
                result[charkey] = allTextContent;
            }
        }
        if (this.opts.xmlns) {
            var namespaceKey = (this.opts.attrkey || defaultAttrkey) + "ns";
            result[namespaceKey] = { local: node.localName, uri: node.namespaceURI };
        }
        if (attrsObject) {
            if (this.opts.mergeAttrs) {
                if (this.opts.explicitArray) {
                    for (var _i = 0, _d = Object.keys(attrsObject); _i < _d.length; _i++) {
                        var key = _d[_i];
                        result[key] = [attrsObject[key]];
                    }
                }
                else {
                    result = __assign({}, result, attrsObject);
                }
            }
            else {
                result[this.opts.attrkey || defaultAttrkey] = attrsObject;
            }
        }
        return result;
        var _a, _b, _c;
    };
    return Parser;
}());
export { Parser };
//# sourceMappingURL=parser.js.map