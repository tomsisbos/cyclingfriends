import { overrideDefaultsWith, defaultAttrkey, defaultCharkey, defaultChildkey } from "./options";
var doc = document.implementation.createDocument(null, null, null);
var serializer = new XMLSerializer();
var Builder = /** @class */ (function () {
    function Builder(opts) {
        this.opts = overrideDefaultsWith(opts);
    }
    Builder.prototype.buildAttributes = function (attrs) {
        var result = [];
        for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {
            var key = _a[_i];
            var attr = doc.createAttribute(key);
            attr.value = attrs[key].toString();
            result.push(attr);
        }
        return result;
    };
    Builder.prototype.buildNode = function (obj, context) {
        var attrkey = this.opts.attrkey || defaultAttrkey;
        var charkey = this.opts.charkey || defaultCharkey;
        var childkey = this.opts.childkey || defaultChildkey;
        if (obj == undefined) {
            obj = this.opts.emptyTag || '';
        }
        if (typeof obj === "string" || typeof obj === "number" || typeof obj === "boolean") {
            var elem = doc.createElement(context.elementName);
            elem.textContent = obj.toString();
            return [elem];
        }
        else if (Array.isArray(obj)) {
            var result = [];
            for (var _i = 0, obj_1 = obj; _i < obj_1.length; _i++) {
                var arrayElem = obj_1[_i];
                for (var _a = 0, _b = this.buildNode(arrayElem, context); _a < _b.length; _a++) {
                    var child = _b[_a];
                    result.push(child);
                }
            }
            return result;
        }
        else if (typeof obj === "object") {
            var elem = doc.createElement(context.elementName);
            for (var _c = 0, _d = Object.keys(obj); _c < _d.length; _c++) {
                var key = _d[_c];
                if (key === attrkey) {
                    for (var _e = 0, _f = this.buildAttributes(obj[key]); _e < _f.length; _e++) {
                        var attr = _f[_e];
                        elem.attributes.setNamedItem(attr);
                    }
                }
                else if (key === childkey && !(this.opts.explicitChildren && this.opts.preserveChildrenOrder)) {
                    var children = obj[childkey];
                    for (var _g = 0, _h = Object.keys(children); _g < _h.length; _g++) {
                        var childElementKey = _h[_g];
                        for (var _j = 0, _k = this.buildNode(children[childElementKey], { elementName: childElementKey }); _j < _k.length; _j++) {
                            var child = _k[_j];
                            elem.appendChild(child);
                        }
                    }
                }
                else if (key === charkey) {
                    elem.appendChild(document.createTextNode(obj[key]));
                }
                else {
                    for (var _l = 0, _m = this.buildNode(obj[key], { elementName: key }); _l < _m.length; _l++) {
                        var child = _m[_l];
                        elem.appendChild(child);
                    }
                }
            }
            return [elem];
        }
        else {
            throw new Error("Illegal value passed to buildObject: " + obj);
        }
    };
    Builder.prototype.buildObject = function (obj) {
        var rootName = this.opts.rootName || "root";
        if (Array.isArray(obj)) {
            var mergedObj = {};
            for (var _i = 0, obj_2 = obj; _i < obj_2.length; _i++) {
                var arrayElem = obj_2[_i];
                for (var _a = 0, _b = Object.keys(arrayElem); _a < _b.length; _a++) {
                    var key = _b[_a];
                    if (!mergedObj[key]) {
                        mergedObj[key] = [];
                    }
                    mergedObj[key].push(arrayElem[key]);
                }
            }
            obj = mergedObj;
        }
        var keys = Object.keys(obj);
        var dom;
        if (keys.length <= 1 && !this.opts.rootName && this.opts.explicitRoot) {
            dom = this.buildNode(obj[keys[0]] || '', { elementName: keys[0] || rootName })[0];
        }
        else {
            dom = this.buildNode(obj, { elementName: rootName })[0];
        }
        var xmlString = serializer.serializeToString(dom);
        var xmldec = this.opts.xmldec;
        if (xmldec && !this.opts.headless) {
            var declaration = "<?xml version=\"" + xmldec.version + "\" encoding=\"" + xmldec.encoding + "\" standalone=\"" + (xmldec.standalone ? "yes" : "no") + "\"?>";
            xmlString = declaration + xmlString;
        }
        return xmlString;
    };
    return Builder;
}());
export { Builder };
//# sourceMappingURL=builder.js.map